#!/usr/bin/lua

-- FWWRT authentication portal helper methods
--
-- Daniel Podolsky, tpaba@cpan.org, 2009-08-04
-- Roman Belyakovsky, roman.belyakovsky@gmail.com
-- Licence is the same as OpenWRT

module("fwwrt.basicadmin", package.seeall)

--require "profiler"
--prof=0 date 08261515109

require "luasql.sqlite"

require "fwwrt.authportal"
require "fwwrt.crypt"
require "fwwrt.simplelp"
require "fwwrt.util"

local webDir     = fwwrt.util.uciGet('httpd.httpd.home',            'string')
local hostname   = fwwrt.util.uciGet('fwwrt.authportal.httpsName',  'string')
local ssid       = fwwrt.util.uciGet('wireless.wifi-iface.ssid',  'string')
local cardGenTempl = fwwrt.util.fileToVariable(webDir.."/cardGen.template")

--local env = {dir = webDir, ssid=ssid}
local cards = fwwrt.simplelp.loadFile(webDir.."/cards.template", {dir = webDir, ssid=ssid})
local cardGen = fwwrt.simplelp.loadFile(webDir.."/cardGen.template", {dir = webDir})

local statement = {begin= "BEGIN TRANSACTION",
					commit = "END TRANSACTION",
	insert10users = 
	[[
		INSERT INTO users(username, password, tarifid, autogenerated) VALUES (?,'nopass',1,'true');
	]]
	}

--print("cards="..cards)

dbCon = fwwrt.dbBackend.connect()

local key, val
for key, val in pairs(statement)
	do
	if (type(val) == 'string')
		then
		statement[key] = dbCon:prepare(val)
	end
end

function checkLoginPost(request)
	if request.method == 'POST' 
		and request.POST.oplogin 
		and request.POST.opname 
		and request.POST.oppass then
			return checkOpLogin(request.POST.opname, request.POST.oppass)
	end
	return nil
end

function checkOpLogin(user, pass)
	local cur = assert (dbCon:execute(string.format([[
         select * from operators where opname = '%s' and oppass = '%s']], user, pass))
	)
	-- row = cur:fetch ({}, "a")	-- the rows will be indexed by field names
	local result = cur:fetch({}, "a")
	cur:close()
	return result and result.opname or nil
end

local function insertSeveralUers(several)
	local i, v
	local abiturients = {}
	local tries = 0
	repeat
		tries = tries + 1
		abiturients = {}
		for i=1,several do
--			print(string.format("i = %d and tries = '%d'", i, tries))
			table.insert(abiturients, {"TEXT", fwwrt.crypt.randomString()})
		end
		fwwrt.dbBackend.bindAndExecute(statement.begin)
		for i,v in ipairs(abiturients) do
			success, result = pcall(fwwrt.dbBackend.bindAndExecute,statement.insert10users,v)
		end
		fwwrt.dbBackend.bindAndExecute(statement.commit)
		if tries > 1 then fwwrt.util.logger("LOG_ERR","tries = '"..tries.."'") end
	until success or tries > 50
	if not success then
		error(string.format("user is not added in %d tries: %s", tries, tostring(result)))
	end
	return abiturients
end

local abiturientas = {}
function autoMakeUsers() --passLength
	local abiturient = table.remove(abiturientas)
	if not abiturient then
		abiturientas = insertSeveralUers(10)
		abiturient = table.remove(abiturientas)
	end
	return  abiturient[2]
end

function checkCookie(cookie, ip) --todo: improve me
	local encOperand = string.sub(cookie,string.len("operator=\"")+1, -2)
	local operand = fwwrt.crypt.decrypt(encOperand)
--	print("shecking cookie, encript: "..tostring(operand).."")
	if (not operand) then return nil end
	_,_,operator,cookieip,expire = string.find(operand,"^(%S+)%s+(%S+)%s+(%S+)$")
	if (operator and cookieip == ip and fwwrt.util.a2i(expire) > os.time()) then return operator end
	return nil
end

function makeCookieHeaders(wsapi_env, operator)
	local expire = os.time()+3600
	local expireString	= os.date ("!%a, %d-%b-%Y %H:%M:%S GMT",expire)
	local cookedHeaders = commonHeaders
	local operand = operator.." "..wsapi_env.REMOTE_ADDR.." "..expire
	local encOperand = fwwrt.crypt.encrypt(operand)
	cookedHeaders = {["Set-Cookie"] = "operator=\""..encOperand.."\"; expires="..expireString..";secure"}
	return cookedHeaders
end

function makeNoCookieHeaders()
	local expire = os.time()-3600
	local expireString	= os.date ("!%a, %d-%b-%Y %H:%M:%S GMT",expire)
	local cookedHeaders = commonHeaders
	cookedHeaders = {["Set-Cookie"] = "operator=nooperator; expires="..expireString..";secure"}
	return cookedHeaders
end

function doAdmin(wsapi_env, request) --generate cards, create users
	local time1=os.time()
	local width="40%"
	local height="85mm"
	local countP = request.POST.count or math.floor((request.POST.cardsCount-1)/10)+1
--	print(math.floor(9/10)+1)
--	local note = request.POST.note
	local pcdiff = 10/countP
	local useIn = {}
	useIn.day = 24*60*60
	useIn.week, useIn.month, useIn.year =
	useIn.day*7,useIn.day*31-12*60*60,useIn.day*365
--	local useBy = os.time() + useIn[request.POST.useIn]
	
-- 	local expireIn = request.POST.eMinute*60 + 
-- 	request.POST.eHour*60*60 + request.POST.eDay*60*60*24 + 
-- 	request.POST.eMonth*60*60*24*30+60*60*12 + request.POST.eYear*60*60*24*365
	local env = {pages = countP, pcdiff = pcdiff,
		echo = function (...) local i,v for i,v in ipairs(arg) do coroutine.yield(tostring(v)) end end,
		user = function () return autoMakeUsers() end}
	coroutine.yield(cards:run(env))
--	test(wsapi_env)
	local time2=os.time()
--	fwwrt.util.logger("LOG_DEBUG","generating users done in "..time2-time1.." seconds")
end

function showAdminLogin(wsapi_env, headers)
	local reason = reason or ""
	local template  = fwwrt.util.fileToVariable(webDir.."/showAdminLogin.template")
	local values    = {actionUrl = "https://"..wsapi_env.SERVER_NAME.."/admin"
	                  ,reason    = reason}
	local process = function () coroutine.yield(cosmo.fill(template, values)) end
	return 200, headers, coroutine.wrap(process)
end

function showBasicAdminForm(wsapi_env, operator)
	local template  = cardGenTempl
	local values = {
		pcdiff = 87, actionUrl = "https://"..wsapi_env.SERVER_NAME.."/admin",
		user = function () return fwwrt.crypt.randomString() end
		} --, user = fwwrt.crypt.randomString()
	local process = function () coroutine.yield(cardGen:run(values)) end
	return 200, makeCookieHeaders(wsapi_env, operator), coroutine.wrap(process)
end

function processBasicAdminForm(wsapi_env) --main, 
	local request  = wsapi.request.new(wsapi_env)
--	fwwrt.util.logger("LOG_DEBUG","cookie = '"..tostring(wsapi_env.HTTP_COOKIE).."'")
	local operator = checkCookie(wsapi_env.HTTP_COOKIE, wsapi_env.REMOTE_ADDR)
	                 or checkLoginPost(request)
--	fwwrt.util.logger("LOG_DEBUG","operator = "..tostring(operator))
	if ( operator ) then
		if (request.method == 'POST' and request.POST.generate) then
			local callDoAdmin = function() return doAdmin(wsapi_env, request) end
			return 200, makeCookieHeaders(wsapi_env, operator), coroutine.wrap(callDoAdmin)
		elseif (request.method == 'POST' and request.POST.logout) then
			return showAdminLogin(wsapi_env, makeNoCookieHeaders())
		else
			return showBasicAdminForm(wsapi_env, operator)
		end
	else
		return showAdminLogin(wsapi_env, commonHeaders)
	end
end