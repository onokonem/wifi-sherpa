#!/usr/bin/lua

-- FWWRT authentication portal helper methods
--
-- Daniel Podolsky, tpaba@cpan.org, 2009-08-04
-- Roman Belyakovsky, roman.belyakovsky@gmail.com
-- Licence is the same as OpenWRT

module("fwwrt.basicadmin", package.seeall)

--require "profiler"
prof=0

require "luasql.sqlite"

require "fwwrt.authportal"

local webDir     = fwwrt.util.uciGet('httpd.httpd.home',            'string')
local hostname   = fwwrt.util.uciGet('fwwrt.authportal.httpsName',  'string')
local ssid       = fwwrt.util.uciGet('wireless.wifi-iface.ssid',  'string')
local cardsTempl=fwwrt.util.fileToVariable(webDir.."/cards.template")
local tableTempl = fwwrt.util.fileToVariable(webDir.."/cardTable.template")
local rowsTempl = fwwrt.util.fileToVariable(webDir.."/cardRows.template")
local cardTempl = fwwrt.util.fileToVariable(webDir.."/card.template")
local dynamicUserTempl = fwwrt.util.fileToVariable(webDir.."/dynamicUser.template")
math.randomseed(os.time())

dbCon = fwwrt.dbBackend.connect()

function checkOpLogin(user, pass)
--	local stmt = dbCon:prepare[[ SELECT * FROM operators WHERE username = :user AND pass = :pass ]]
--	stmt:bind_names{  user = user,  pass = pass    }
--	stmt:step()
---	stmt:reset()
--	stmt:finalize()
--	return true

--	local cur = dbCon:prepare"select * from operators where opname = ? and oppass = ?"
	-- row = cur:fetch ({}, "a")	-- the rows will be indexed by field names
	
	local cur = assert (dbCon:execute(string.format([[
         select * from operators where opname = '%s' and oppass = '%s']], user, pass))
	)
	-- row = cur:fetch ({}, "a")	-- the rows will be indexed by field names
	local result = assert(cur:fetch({}, "a"), "no matches in database!")
	cur:close()
	return result.opid
end

function insertUser(user) --should sheck values and return errors correctly todo
	local cur = dbCon:prepare"INSERT INTO users(username, password, tarifid, autogenerated) VALUES(?,?,?,?)"
	cur:bind({"TEXT", user},{"TEXT", "nopass"},{"INTEGER",1}, {"BOOLEAN", true})
	return assert(cur:execute()) -- executes the prepared statement, accetr? todo
--	return true --do we need this? todo
end

function autoMakeUser() --passLength
	local abiturient
	local tries = 0
	local success, result
	repeat
		abiturient = generate()
		success, result = pcall(insertUser,abiturient) -- ~= true and tries < 50 do
		tries = tries + 1
	until success or tries > 50
	if not success then
		error(string.format("user is not added in %d tries: %s", tries, tostring(result)))
	end
	print("user added in "..tries.." tries ==================================================")
	return abiturient
end

function generate()
	return string.format("%8.8x", math.random(0,0x6fffffff))
end

function checkCookie(cookie) --todo: improve me
	if cookie == "opname=root" then
		return true
	else
		return nil
	end
end

function doAdmin(wsapi_env, request) --generate cards, create users
	local time1=os.time()
	local width="40%"
	local height="85mm"
--	local pt=5 --cards per page
--	local row=pt*number
--	local col=2
--	local request = wsapi.request.new(wsapi_env)
--	coroutine.yield("<pre>"..printTable(request, "request", ".", 10).."</pre>")
	local countP = request.POST.count or math.floor((request.POST.cardsCount-1)/10)+1
--	print(math.floor(9/10)+1)
--	local note = request.POST.note
	
	
	local useIn = {}
	useIn.day = 24*60*60
	useIn.week, useIn.month, useIn.year =
	useIn.day*7,useIn.day*31-12*60*60,useIn.day*365
--	local useBy = os.time() + useIn[request.POST.useIn]
	
-- 	local expireIn = request.POST.eMinute*60 + 
-- 	request.POST.eHour*60*60 + request.POST.eDay*60*60*24 + 
-- 	request.POST.eMonth*60*60*24*30+60*60*12 + request.POST.eYear*60*60*24*365
	
	local passLength = 8
	local function multiplyStrings (text, count)
		local ntext = ""
		for i = 1, count do
		 	ntext = ntext..text
		end
		return ntext
	end
	local s = 234
	cards=("$do_cosm[["..cardsTempl.."]]")
	cardValues = {
		do_cosm = function()
			cosmo.yield{
				tables = multiplyStrings("$do_cosm[["..tableTempl.."]]", countP),
				rows = "$do_cosm[["..rowsTempl.."]]",
				card = "$do_cosm[["..cardTempl.."]]",
				dynamicUser = "$do_dynamic[["..dynamicUserTempl.."]]",
				ssid = ssid,
--				note = "i = '"..s.."'",
				height = height,
				width = width
--				expireIn = expireIn
			}
		end,
		do_dynamic = function()
			cosmo.yield{
				user = autoMakeUser() --user(s)
			}
		end
	}
--	userFill = function(seed) return autoMakeUser(passLength, seed*3+os.time()) end
	i = 0
--	profiler.start()
	while string.find(cards, "%$") ~= nill and i < 10 do
--		usertempl
		cards = cosmo.fill(cards,cardValues)
		print("filling template... Level "..i)
		i = i + 1
	end
--	profiler.stop()
	print("ok, page ready to show")
--	print(cards)
	coroutine.yield(cards)
--	test(wsapi_env)
	print("3003")
	local time2=os.time()
	print("generating users done in "..time2-time1.." seconds")
	print("flush")
end

function showAdminLogin(wsapi_env, reason)
	local reason = reason or ""
	local template  = fwwrt.util.fileToVariable(webDir.."/showAdminLogin.template")
	local values    = {actionUrl = "https://"..hostname.."/admin"
	                  ,reason    = reason}
	
	local process = function () coroutine.yield(cosmo.fill(template, values)) end
	return 200, commonHeaders, coroutine.wrap(process)
end

function makeCookieHeaders(wsapi_env)
	local expireTime	= tostring(os.date ("!%a, %d-%b-%Y %H:%M:%S GMT",os.time()+3600));
	local cookedHeaders = commonHeaders
	cookedHeaders = {["Set-Cookie"] = "opname=root; expires="..expireTime}
	return cookedHeaders
end

function showBasicAdminForm(wsapi_env) --showlogin
	local template  = fwwrt.util.fileToVariable(webDir.."/cardGen.template")
	local values = {actionUrl = "https://"..hostname.."/admin"}

	local process = function () coroutine.yield(cosmo.fill(template, values)) end
	return 200, makeCookieHeaders(wsapi_env), coroutine.wrap(process)
end

function processBasicAdminForm(wsapi_env) --main
	local request  = wsapi.request.new(wsapi_env)
	local trueadmin = false
	if (checkCookie(wsapi_env.HTTP_COOKIE) == nil) then
--		print("cookie == nil")
		if (request.method ~= 'POST' or request.POST.oplogin == nil) -- no cookie, no login attempt
		or (pcall(checkOpLogin, request.POST.opname, request.POST.oppass) == false) then -- login failed 
			return showAdminLogin(wsapi_env)
		else  -- login success
			trueadmin = true -- no need?
--			print("login – ok")
		end
	else
--		print("cookie – ok")
		trueadmin = true -- no need?
	end
	
	if (request.POST.generate == nil and trueadmin == true) then
--		print("show basic admin form")
		return showBasicAdminForm(wsapi_env) 
	end
--	print("request.method = '"..request.method.."'\ntrueadmin = '"..tostring(trueadmin).."'")
    local callDoAdmin = function() return doAdmin(wsapi_env, request) end
    return 200, makeCookieHeaders(wsapi_env), coroutine.wrap(callDoAdmin)
end
