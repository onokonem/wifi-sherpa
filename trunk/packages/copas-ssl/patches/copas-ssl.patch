diff -ubBENdr copas-1.1.5.orig/Makefile copas-1.1.5/Makefile
--- copas-1.1.5.orig/Makefile	2007-10-30 01:50:16.000000000 +0300
+++ copas-1.1.5/Makefile	2009-08-25 13:43:10.000000000 +0400
@@ -1,10 +1,10 @@
 # $Id: Makefile,v 1.3 2007/10/29 22:50:16 carregal Exp $
 
 # Default prefix
-PREFIX = /usr/local
+# PREFIX = /usr/local # will be set externally
 
 # System's lua directory (where Lua libraries are installed)
-LUA_DIR= $(PREFIX)/share/lua/5.1
+LUA_DIR= $(PREFIX)/lib/lua
 
 install:
 	mkdir -p $(LUA_DIR)/copas
diff -ubBENdr copas-1.1.5.orig/src/copas/copas.lua copas-1.1.5/src/copas/copas.lua
--- copas-1.1.5.orig/src/copas/copas.lua	2009-04-08 02:09:52.000000000 +0400
+++ copas-1.1.5/src/copas/copas.lua	2009-08-26 00:03:27.000000000 +0400
@@ -16,6 +16,8 @@
 
 require "coxpcall"
 
+local ssl = nil
+
 local WATCH_DOG_TIMEOUT = 120
 
 -- Redefines LuaSocket functions with coroutine safe versions
@@ -104,6 +106,7 @@
 end
 
 local _servers = newset() -- servers being handled
+local _ssl         = {}
 local _reading_log = {}
 local _writing_log = {}
 
@@ -252,14 +255,75 @@
        end
 end
 
+local superclient_mt     = {__index = {}}
+superclient_mt.__index.setoption   = function(self, ...) return self.socket:setoption(...)   end
+superclient_mt.__index.getsockname = function(self, ...) return self.socket:getsockname(...) end
+superclient_mt.__index.getpeername = function(self, ...) return self.socket:getpeername(...) end
+superclient_mt.__index.settimeout  = function(self, ...) return self.socket:settimeout(...)  end
+superclient_mt.__index.close       = function(self, ...) return self.socket:close(...)       end
+superclient_mt.__index.flush       = function(self, ...) return self.socket:flush(...)       end
+superclient_mt.__index.getfd       = function(self, ...) return self.socket:getfd(...)       end
+superclient_mt.__index.dirty       = function(self, ...) return self.socket:dirty(...)       end
+superclient_mt.__index.want        = function(self, ...) return self.socket:want(...)        end
+superclient_mt.__index.receive     = function(self, ...) return self.socket:receive(...)     end
+superclient_mt.__index.send        = function(self, ...) return self.socket:send(...)        end
+
+
+local superclient_mt_ssl = {__index = {}}
+--
+local k,v for k,v in pairs(superclient_mt.__index) do superclient_mt_ssl.__index[k] = v end
+--
+superclient_mt_ssl.__index.setoption   = function(self, ...) return true end
+superclient_mt_ssl.__index.getsockname = function(self, ...) return self.peeraddr, self.peerport end
+superclient_mt_ssl.__index.getpeername = function(self, ...) return self.peername end
+--
+superclient_mt_ssl.__index.receive     = function(self, ...)
+	local res, err, part = self.socket:receive(...)
+	err = ((err == "wantread") or (err == "wantwrite")) and "timeout" or err
+	return res, err, part
+	end
+--
+superclient_mt_ssl.__index.send        = function(self, ...)
+	local res, err, part = self.socket:send(...)
+	err = ((err == "wantwrite") or (err == "wantread")) and "timeout" or err
+	return res, err, part
+	end
+
+function superclient(client, input)
+	if(not client) then return nil end
+
+	client:settimeout(0)
+
+	local sc = {parent = input
+	           ,socket = client
+	           }
+
+	if(_ssl[input])
+		then
+		setmetatable(sc, superclient_mt_ssl)
+
+		client:setoption("tcp-nodelay", true)
+		sc.peeraddr, sc.peerport = client:getsockname()
+		sc.peername = client:getpeername()
+
+		sc.socket      = assert(ssl.wrap(client, _ssl[input]))
+		
+		sc.socket:dohandshake()
+	else
+		setmetatable(sc, superclient_mt)
+		end
+	
+	return sc
+	end
+	
 -- accepts a connection on socket input
 local function _accept(input, handler)
-	local client = input:accept()
+    local client = superclient(input:accept(), input)
 	if client then
 		client:settimeout(0)
 		local co = coroutine.create(handler)
 		_doTick (co, client)
-		--_reading:insert(client)
+		--_reading:insert(client.socket)
 	end
 	return client
 end
@@ -276,9 +340,11 @@
 -------------------------------------------------------------------------------
 -- Adds a server/handler pair to Copas dispatcher
 -------------------------------------------------------------------------------
-function addserver(server, handler, timeout)
+function addserver(server, handler, timeout, ssl_params)
+	if (ssl_params) then ssl = require("ssl") end
 	server:settimeout(timeout or 0.1)
 	_servers[server] = handler
+	_ssl[server]     = ssl_params
 	_reading:insert(server)
 end
 
