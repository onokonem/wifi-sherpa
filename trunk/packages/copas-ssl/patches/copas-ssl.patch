diff -ubBENdr copas-1.1.5.orig/Makefile copas-1.1.5/Makefile
--- copas-1.1.5.orig/Makefile	2007-10-30 01:50:16.000000000 +0300
+++ copas-1.1.5/Makefile	2009-08-25 13:43:10.000000000 +0400
@@ -1,10 +1,10 @@
 # $Id: Makefile,v 1.3 2007/10/29 22:50:16 carregal Exp $
 
 # Default prefix
-PREFIX = /usr/local
+# PREFIX = /usr/local # will be set externally
 
 # System's lua directory (where Lua libraries are installed)
-LUA_DIR= $(PREFIX)/share/lua/5.1
+LUA_DIR= $(PREFIX)/lib/lua
 
 install:
 	mkdir -p $(LUA_DIR)/copas
diff -ubBENdr copas-1.1.5.orig/src/copas/copas.lua copas-1.1.5/src/copas/copas.lua
--- copas-1.1.5.orig/src/copas/copas.lua	2009-04-08 02:09:52.000000000 +0400
+++ copas-1.1.5/src/copas/copas.lua	2009-08-28 21:39:40.000000000 +0400
@@ -16,6 +16,8 @@
 
 require "coxpcall"
 
+local ssl = nil
+
 local WATCH_DOG_TIMEOUT = 120
 
 -- Redefines LuaSocket functions with coroutine safe versions
@@ -104,6 +106,7 @@
 end
 
 local _servers = newset() -- servers being handled
+local _ssl         = {}
 local _reading_log = {}
 local _writing_log = {}
 
@@ -252,14 +255,80 @@
        end
 end
 
+local socketWrapper = {
+	 setoption   = function(self, ...) return self.socket:setoption(...)   end
+	,getsockname = function(self, ...) return self.socket:getsockname(...) end
+	,getpeername = function(self, ...) return self.socket:getpeername(...) end
+	,settimeout  = function(self, ...) return self.socket:settimeout(...)  end
+	,close       = function(self, ...) return self.socket:close(...)       end
+	,flush       = function(self, ...) return self.socket:flush(...)       end
+	,getfd       = function(self, ...) return self.socket:getfd(...)       end
+	,dirty       = function(self, ...) return self.socket:dirty(...)       end
+	,want        = function(self, ...) return self.socket:want(...)        end
+	,receive     = function(self, ...) return self.socket:receive(...)     end
+	,send        = function(self, ...) return self.socket:send(...)        end
+	}
+--
+local socketWrapperMT = {__index = socketWrapper}
+--
+socketWrapper.new = function(socket, parent)
+	local result = {socket = socket
+	               ,parent = parent
+	               }
+	setmetatable(result, socketWrapperMT)
+	socket:settimeout(0)
+	return result
+	end
+
+local socketWrapperSsl = {
+	 setoption   = function(self, ...) return true end
+	,getsockname = function(self, ...) return self.peeraddr, self.peerport end
+	,getpeername = function(self, ...) return self.peername end
+	--
+	,receive     = function(self, ...)
+		local res, err, part = self.socket:receive(...)
+		err = ((err == "wantread") or (err == "wantwrite")) and "timeout" or err
+		return res, err, part
+		end
+	--
+	,send        = function(self, ...)
+		local res, err, part = self.socket:send(...)
+		err = ((err == "wantwrite") or (err == "wantread")) and "timeout" or err
+		return res, err, part
+		end
+	}
+
+setmetatable(socketWrapperSsl, socketWrapperMT)
+
+local socketWrapperSslMT = {__index = socketWrapperSsl}
+
+socketWrapperSsl.new = function(socket, parent)
+	local result = socketWrapper.new(socket, parent)
+
+	result:setoption("tcp-nodelay", true)
+	result.peername = result:getpeername()
+	result.peeraddr, result.peerport = result:getsockname()
+
+	result.socket = assert(ssl.wrap(result.socket, _ssl[result.parent]))
+
+	setmetatable(result, socketWrapperSslMT)
+	return result
+	end
+
+function superclient(client, input)
+	if(not client) then return nil end
+
+	return _ssl[input] and socketWrapperSsl.new(client, input) or socketWrapper.new(client, input)
+	end
+	
 -- accepts a connection on socket input
 local function _accept(input, handler)
-	local client = input:accept()
+    local client = superclient(input:accept(), input)
 	if client then
 		client:settimeout(0)
 		local co = coroutine.create(handler)
 		_doTick (co, client)
-		--_reading:insert(client)
+		--_reading:insert(client.socket)
 	end
 	return client
 end
@@ -276,9 +345,11 @@
 -------------------------------------------------------------------------------
 -- Adds a server/handler pair to Copas dispatcher
 -------------------------------------------------------------------------------
-function addserver(server, handler, timeout)
+function addserver(server, handler, timeout, ssl_params)
+	if (ssl_params) then ssl = require("ssl") end
 	server:settimeout(timeout or 0.1)
 	_servers[server] = handler
+	_ssl[server]     = ssl_params
 	_reading:insert(server)
 end
 
